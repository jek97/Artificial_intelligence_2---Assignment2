if we run the planner with also -x and the external module (the command is below) then the planner will use it, first i have to build it obtaining in the build folder and a cpp file (procedure in the build instruction), in it the variables are assigned, like the dummy cost, the regions in a map, for our example, among them the variable triger is used to trigger the c++ file to compute the cost, when the variable is set to 1 the external motion planner start to compute the costs and so on for the planner, when it's triggered it extract from and to regions and based on them assign a cost based on the distance or on the function we use.
when we call the module we call also the region poses, which is in the domain and it's a mapping, so for each region a waypoint wp is assigned, you wil need always to discretize the space, usually you have a x,y of the region, then the module will use these position for its computations.
then in the domain folder all the waypoint has associated a position x, y, theta, (the pose) so each waypoint is a sample of the environment and it's associated with a pose, you could even directly associate the region to the pose if you want, because we create a graph and we search a path in it. the landmark will be used after.
in the code you will see the basic way to do all of the task motion planning.
command to launch it from the visit_domain folder:
../../popf-tif/popf3-clp -x dom1.pddl prob1.pddl ../visits_module/build/libVisits.so region_poses
